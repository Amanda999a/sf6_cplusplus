// 문제-숫자찾기.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
/*
정렬된 배열이 주어집니다.
이 배열에서 특정 숫자가 있는지 확인하는 프로그램을 작성하세요.
숫자가 배열에 존재하면 해당 숫자의 인덱스를 반환하고, 존재하지 않으면 **`-1`**을 반환합니다.

배열은 오름차순으로 정렬되어 있으며, 이진 탐색을 사용하여 문제를 해결해야 합니다.

### **조건**

- 배열의 길이: 1 이상 1,000 이하
- 배열의 값: 모든 값은 서로 다르고, 정수 값입니다.
- 찾으려는 숫자도 정수 값입니다.

### **함수 설명**

함수 **`findNumber`**는 다음과 같은 인자를 받습니다.

- **`arr`** (정수 배열): 오름차순으로 정렬된 정수 배열
- **`target`** (정수): 찾으려는 숫자

함수는 찾으려는 숫자의 인덱스(0부터 시작)를 반환하며, 숫자가 없을 경우 **`-1`**을 반환합니다.
*/
#include <iostream>
#include <vector>
using namespace std;



int findNumber(const std::vector<int>& arr, int target) {
    // 여기에 이진 탐색 코드를 작성하세요.
    /*
    // O(n)만큼 시간이 걸려서 타임에러 예상
    int i = 0;
    for (int num : arr) {
        if (num == target) { return i; }
        i++;
    }
    */
    //이진 탐색
    //left = 첫번째 인덱스
    int left = 0;
    //right = 마지막 인덱스
    int right = arr.size() - 1;
    
    // left가 right를 넘어가면 모든 요소를 검사했다.
    while (left <= right) {
        //mid 중앙 인덱스 - 이진탐수 중간값
        int mid = (left + right) / 2;

        //타겟이 중간 인덱스와 같다면
        if (arr[mid] == target) {
            return mid;
        }
        //타겟이 중간 인덱스보다 작으면 
        else if (arr[mid] > target) {
            right = mid - 1;
        }
        //타겟이 중간 인덱스가 크면 left 위치가 옮겨져야한다
        else {
            left = mid + 1;
        }
    }
    return -1; 

}


int main()
{
    // 예제 입력
    std::vector<int> arr = { 1, 3, 5, 7, 9, 11 };
    int target = 7;
    cout << findNumber(arr, target) << std::endl; // 출력: 3

    target = 4;
    cout << findNumber(arr, target) << std::endl; // 출력: -1

}

// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
