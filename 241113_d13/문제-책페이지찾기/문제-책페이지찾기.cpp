// 문제-책페이지찾기.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

/*
한 도서관에서 책을 전자 시스템으로 관리하고 있습니다. 이 시스템은 책 페이지 번호가 정렬된 배열로 저장되어 있으며, 특정 페이지가 책에 존재하는지 빠르게 찾고자 합니다. 주어진 페이지 배열에서 **특정 페이지 번호가 존재하는지** 확인하는 프로그램을 작성하세요. 이 문제는 이진 탐색을 사용하여 해결해야 합니다.

---

### **조건**

- 페이지 번호 배열은 오름차순으로 정렬되어 있습니다.
- 배열에 중복되는 페이지 번호는 없습니다.
- 페이지 번호 배열과 찾으려는 페이지 번호는 모두 자연수입니다.

### **함수 설명**

함수 **`findPage`**는 다음과 같은 인자를 받습니다.

- **`pages`** (정수 배열): 오름차순으로 정렬된 책의 페이지 번호 배열
- **`target`** (정수): 찾으려는 페이지 번호

함수는 찾으려는 페이지가 존재하면 해당 **페이지 번호**를 반환하고, 존재하지 않으면 **`-1`**을 반환합니다.
*/

#include <iostream>
#include <vector>

using namespace std;

int findPage(const std::vector<int>& pages, int target) {
// 여기에 이진 탐색 코드를 작성하세요.
    int left = 0;
    int right = pages.size() - 1;

    while (left <= right) {
        int mid = (left + right) / 2;
        if (pages[mid] == target) {
            return mid;
        }
        else if (pages[mid] > target) {
            right = mid - 1;
        }
        else {
            left = mid + 1;
        }
    }
    return -1;
}

// 예제 입력
int main() {
    std::vector<int> pages = { 3, 8, 15, 23, 42, 57, 81 };
    int target = 15;
    cout << findPage(pages, target) << std::endl; // 출력: 2

    target = 50;
    cout << findPage(pages, target) << std::endl; // 출력: -1

    return 0;
}


// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
